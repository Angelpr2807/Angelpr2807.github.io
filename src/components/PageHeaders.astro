---
// Side bar menu, table of contents
export type Props = {
    pageHeadings : Array<{ depth: number; slug: string; text: string }[]>
}

const { pageHeadings } = Astro.props;

const toc = pageHeadings.reduce((array, heading) => {
  if (heading.depth === 2) {
    array.push({ ...heading, subheadings: [] });
  } else if (heading.depth === 3) {
    array.at(-1)?.subheadings.push(heading);
  }
  return array;
}, [] as HeadingWithSubheadings[]);

---

<div class="toc-container">
    <nav class="toc" aria-label="Tabla de contenidos">
        <h2>En este art√≠culo</h2>
        <ol>
            {
            toc.map((h) => 
                (<li>
                <a class="toc-link" href=`#${h.slug}`>{h.text}</a>
                    {
                        h.subheadings.length > 0 && (
                        <ol>
                            {h.subheadings.map((sub) => (
                            <li>
                                <a class="toc-link sub-link" href={`#${sub.slug}`}>{sub.text}</a>
                            </li>
                            ))}
                        </ol>
                    )}
                </li>
                ))
            }
        </ol> 
    </nav>
</div>

<style>
    nav.toc {
        display: block;
        position: sticky;
        top: 7rem;
        max-height: 77.5vh;
        width: 100%;
        max-width: 200px;
        overflow-y: auto;

        &::-webkit-scrollbar-thumb {
            display:none;
        }

        h2 {
            font-size: 1rem;
        }
    }

    nav.toc > ol {
        position: relative;
        padding: 0;

        &:before {
            position: absolute;
            content: "";
            width: 2px;
            height: 100%;
            left: 0;
            top: 0;
            background-color: rgba(var(--box-shadow-color), .5);
        }
    }
    ol {
        list-style-type: none;
        padding: 0rem;
    }
    a {
        font-size: .85rem;
        display: block;
        text-decoration: none;
        text-align: left;
        color: light-dark(var(--foreground-light), --foreground);
        opacity: 0.65;
        transition: all .35s linear;
        padding: .3rem 0 .3rem 1rem ; 

        &:hover {
            color: var(--purple-dark);
            text-decoration: underline;
        }

        &.sub-link {
            padding-left: 2.5rem;
        }
    }

    a.active {
        color: light-dark(var(--foreground-light), --foreground);
        opacity: 1;
        background-color: var(--purple-dark-transparent);
        border-left: 2px solid var(--purple-dark);
    }

    @media screen and (max-width: 1250px){
        .toc-container {
            display: none;
        }
    }
</style>

<script is:inline>
document.addEventListener("DOMContentLoaded", () => {
    function addIntersectionObserver() {
        const observer = new IntersectionObserver((sections) => {
            sections.forEach((section) => {
                const heading = section.target.querySelector('h2, h3');
                if (!heading) return;
                const id = heading.getAttribute('id');

                // Get the link to this section's heading
                const link = document.querySelector(`nav.toc li a[href="#${id}"]`);
                if (!link) return;

                // Add/remove the .active class based on whether the
                // section is visible
                const addRemove = section.intersectionRatio > 0  ? 'add' : 'remove';
                link.classList[addRemove]('active');
            });
        });

        // Observe all the sections of the article
        document.querySelectorAll('article section').forEach((section) => {
            observer.observe(section);
        });
    }
    addIntersectionObserver();
});
</script>
